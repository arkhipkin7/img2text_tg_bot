"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤
"""
import logging
import random
from typing import Dict, List, Optional
from .api_client import APIClient
class APIError(Exception):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ API"""
    pass

logger = logging.getLogger(__name__)

class ContentGenerator:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤"""
    
    def __init__(self, use_api: bool = True):
        self.use_api = use_api
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è fallback –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        self.product_types = ["–°–º–∞—Ä—Ç—Ñ–æ–Ω", "–ù–æ—É—Ç–±—É–∫", "–ù–∞—É—à–Ω–∏–∫–∏", "–ö—Ä–æ—Å—Å–æ–≤–∫–∏", "–°—É–º–∫–∞", "–ü–ª–∞—Ç—å–µ", "–ö–æ—Ñ—Ç–∞", "–î–∂–∏–Ω—Å—ã", "–ß–∞—Å—ã", "–ö–æ—Å–º–µ—Ç–∏–∫–∞"]
        self.brands = ["Apple", "Samsung", "Nike", "Adidas", "Zara", "H&M", "Levi's", "Casio", "L'Oreal", "Maybelline"]
        self.features = ["–í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ", "–°—Ç–∏–ª—å–Ω—ã–π –¥–∏–∑–∞–π–Ω", "–£–¥–æ–±—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è", "–î–æ–ª–≥–æ–≤–µ—á–Ω–æ—Å—Ç—å", "–≠–∫–æ–ª–æ–≥–∏—á–Ω–æ—Å—Ç—å", "–ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "–ö–æ–º—Ñ–æ—Ä—Ç", "–ü—Ä–∞–∫—Ç–∏—á–Ω–æ—Å—Ç—å", "–ú–æ–¥–Ω—ã–π —Ç—Ä–µ–Ω–¥", "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç—å"]
        self.target_audience = ["–ú–æ–ª–æ–¥–µ–∂—å 18-25 –ª–µ—Ç", "–ê–∫—Ç–∏–≤–Ω—ã–µ –ª—é–¥–∏ 25-35 –ª–µ—Ç", "–°—Ç—É–¥–µ–Ω—Ç—ã", "–û—Ñ–∏—Å–Ω—ã–µ —Ä–∞–±–æ—Ç–Ω–∏–∫–∏", "–°–ø–æ—Ä—Ç—Å–º–µ–Ω—ã", "–ú–æ–¥–Ω–∏–∫–∏ –∏ –º–æ–¥–Ω–∏—Ü—ã", "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —ç–Ω—Ç—É–∑–∏–∞—Å—Ç—ã"]
        self.seo_keywords = ["–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π", "—Å—Ç–∏–ª—å–Ω—ã–π", "–º–æ–¥–Ω—ã–π", "—É–¥–æ–±–Ω—ã–π", "–ø—Ä–∞–∫—Ç–∏—á–Ω—ã–π", "–Ω–∞–¥–µ–∂–Ω—ã–π", "–∫—Ä–∞—Å–∏–≤—ã–π", "—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π", "—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π", "–ø–æ–ø—É–ª—è—Ä–Ω—ã–π"]

    async def generate_from_image(self, image_path: str) -> Dict:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
        Args:
            image_path: –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            
        Returns:
            Dict —Å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
        """
        logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image_path}")
        
        if self.use_api:
            try:
                async with APIClient() as client:
                    return await client.generate_from_image(image_path)
            except APIError as e:
                logger.warning(f"API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback: {e}")
                # Fallback –∫ –∑–∞–≥–ª—É—à–∫–µ
            except Exception as e:
                logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ API, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback: {e}")
                # Fallback –∫ –∑–∞–≥–ª—É—à–∫–µ
        
        # Fallback: –∑–∞–≥–ª—É—à–∫–∞
        await self._simulate_api_call()
        
        product_type = random.choice(self.product_types)
        brand = random.choice(self.brands)
        
        return {
            "title": f"{brand} {product_type} - –ü—Ä–µ–º–∏—É–º –∫–∞—á–µ—Å—Ç–≤–æ",
            "short_description": f"–°—Ç–∏–ª—å–Ω—ã–π –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π {product_type.lower()} –æ—Ç –±—Ä–µ–Ω–¥–∞ {brand}",
            "full_description": f"–ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ–º –≤–∞—à–µ–º—É –≤–Ω–∏–º–∞–Ω–∏—é –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π {product_type.lower()} –æ—Ç –∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –±—Ä–µ–Ω–¥–∞ {brand}. "
                               f"–≠—Ç–æ—Ç –ø—Ä–æ–¥—É–∫—Ç —Å–æ—á–µ—Ç–∞–µ—Ç –≤ —Å–µ–±–µ —Å—Ç–∏–ª—å–Ω—ã–π –¥–∏–∑–∞–π–Ω, –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –Ω–µ–ø—Ä–µ–≤–∑–æ–π–¥–µ–Ω–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ. "
                               f"–ò–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏ —Å—Ç–∞–Ω–µ—Ç –æ—Ç–ª–∏—á–Ω—ã–º –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∫ –≤–∞—à–µ–º—É –æ–±—Ä–∞–∑—É.",
            "features": random.sample(self.features, min(5, len(self.features))),
            "seo_keywords": random.sample(self.seo_keywords, min(8, len(self.seo_keywords))),
            "target_audience": random.sample(self.target_audience, min(3, len(self.target_audience)))
        }

    async def generate_from_text(self, text: str) -> Dict:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
        
        Args:
            text: –¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            
        Returns:
            Dict —Å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
        """
        logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞: {text[:50]}...")
        
        if self.use_api:
            try:
                async with APIClient() as client:
                    return await client.generate_from_text(text)
            except APIError as e:
                logger.warning(f"API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback: {e}")
                # Fallback –∫ –∑–∞–≥–ª—É—à–∫–µ
            except Exception as e:
                logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ API, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback: {e}")
                # Fallback –∫ –∑–∞–≥–ª—É—à–∫–µ
        
        # Fallback: –∑–∞–≥–ª—É—à–∫–∞
        await self._simulate_api_call()
        
        product_type = random.choice(self.product_types)
        brand = random.choice(self.brands)
        
        return {
            "title": f"{brand} {product_type} - –ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ",
            "short_description": f"–£–Ω–∏–∫–∞–ª—å–Ω—ã–π {product_type.lower()} —Å –ø–µ—Ä–µ–¥–æ–≤—ã–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏",
            "full_description": f"–ù–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω –∏–¥–µ–∞–ª—å–Ω—ã–π {product_type.lower()} –æ—Ç –±—Ä–µ–Ω–¥–∞ {brand}. "
                               f"–ü—Ä–æ–¥—É–∫—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. "
                               f"–û—Ç–ª–∏—á–∞–µ—Ç—Å—è –≤—ã—Å–æ–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º, –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å—é –∏ —Å—Ç–∏–ª—å–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º.",
            "features": random.sample(self.features, min(6, len(self.features))),
            "seo_keywords": random.sample(self.seo_keywords, min(10, len(self.seo_keywords))),
            "target_audience": random.sample(self.target_audience, min(4, len(self.target_audience)))
        }

    async def generate_from_both(self, image_path: str, text: str) -> Dict:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Ç–µ–∫—Å—Ç–∞
        
        Args:
            image_path: –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            text: –¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            
        Returns:
            Dict —Å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
        """
        logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Ç–µ–∫—Å—Ç–∞: {text[:50]}...")
        
        if self.use_api:
            try:
                async with APIClient() as client:
                    return await client.generate_from_both(image_path, text)
            except APIError as e:
                logger.warning(f"API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback: {e}")
                # Fallback –∫ –∑–∞–≥–ª—É—à–∫–µ
            except Exception as e:
                logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ API, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback: {e}")
                # Fallback –∫ –∑–∞–≥–ª—É—à–∫–µ
        
        # Fallback: –∑–∞–≥–ª—É—à–∫–∞
        await self._simulate_api_call()
        
        product_type = random.choice(self.product_types)
        brand = random.choice(self.brands)
        
        return {
            "title": f"{brand} {product_type} - –ò–¥–µ–∞–ª—å–Ω–æ–µ —Å–æ—á–µ—Ç–∞–Ω–∏–µ —Å—Ç–∏–ª—è –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏",
            "short_description": f"–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π {product_type.lower()} —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏",
            "full_description": f"–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–∑–≤–æ–ª–∏–ª —Å–æ–∑–¥–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω—ã–π {product_type.lower()} "
                               f"–æ—Ç –±—Ä–µ–Ω–¥–∞ {brand}. –ü—Ä–æ–¥—É–∫—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—à–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –∏ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–∏—Ç –æ–∂–∏–¥–∞–Ω–∏—è. "
                               f"–°–æ—á–µ—Ç–∞–µ—Ç –≤ —Å–µ–±–µ –ª—É—á—à–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞: —Å—Ç–∏–ª—å, —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å, –∫–∞—á–µ—Å—Ç–≤–æ –∏ –∏–Ω–Ω–æ–≤–∞—Ü–∏–∏.",
            "features": random.sample(self.features, min(7, len(self.features))),
            "seo_keywords": random.sample(self.seo_keywords, min(12, len(self.seo_keywords))),
            "target_audience": random.sample(self.target_audience, min(5, len(self.target_audience)))
        }

    async def _simulate_api_call(self, delay: float = 1.0):
        """
        –°–∏–º—É–ª–∏—Ä—É–µ—Ç –∑–∞–¥–µ—Ä–∂–∫—É API –≤—ã–∑–æ–≤–∞
        
        Args:
            delay: –í—Ä–µ–º—è –∑–∞–¥–µ—Ä–∂–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        import asyncio
        await asyncio.sleep(delay)

    def format_content(self, content: Dict) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
        
        Args:
            content: –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        """
        result = f"üéØ **{content['title']}**\n\n"
        
        result += f"üìù **–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:**\n{content['short_description']}\n\n"
        
        result += f"üìÑ **–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:**\n{content['full_description']}\n\n"
        
        result += f"‚ú® **–û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:**\n"
        for i, feature in enumerate(content['features'], 1):
            result += f"{i}. {feature}\n"
        result += "\n"
        
        result += f"üîç **SEO-–∫–ª—é—á–∏ –¥–ª—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è:**\n"
        result += ", ".join(content['seo_keywords']) + "\n\n"
        
        result += f"üë• **–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è:**\n"
        for i, audience in enumerate(content['target_audience'], 1):
            result += f"{i}. {audience}\n\n"
        
        result += "‚úÖ **–ì–æ—Ç–æ–≤–æ!** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞—Ö."
        
        return result
    
    async def check_api_health(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
        
        Returns:
            True –µ—Å–ª–∏ API –¥–æ—Å—Ç—É–ø–µ–Ω, False –∏–Ω–∞—á–µ
        """
        if not self.use_api:
            return False
            
        try:
            async with APIClient() as client:
                return await client.health_check()
        except Exception as e:
            logger.warning(f"API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            return False 