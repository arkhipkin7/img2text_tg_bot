"""
–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.
–£–±–∏—Ä–∞–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω—É—é –ª–æ–≥–∏–∫—É.
"""

import logging
import os
from typing import Dict, Any, Optional

from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from services.generator import ContentGenerator
from services.subscriptions import SubscriptionService
from shared.constants import MESSAGES
from bot.config import ADMIN_ID, ADMIN_IDS

logger = logging.getLogger(__name__)


class ResultService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    
    def __init__(self):
        self.generator = ContentGenerator()
        redis_url = os.getenv("REDIS_URL", "redis://redis:6379")
        self.subs = SubscriptionService(redis_url)
    
    def _is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        return (ADMIN_ID and user_id == ADMIN_ID) or (user_id in ADMIN_IDS)
    
    async def _check_quota_and_send_error(self, user_id: int, callback: CallbackQuery) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–≤–æ—Ç—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—à–∏–±–∫—É –µ—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ.
        Returns True –µ—Å–ª–∏ –∫–≤–æ—Ç–∞ –µ—Å—Ç—å, False –µ—Å–ª–∏ –Ω–µ—Ç.
        """
        if self._is_admin(user_id):
            return True
            
        if not await self.subs.can_consume(user_id):
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üí≥ –¢–∞—Ä–∏—Ñ—ã", callback_data="open_pricing")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_start")],
            ])
            await callback.message.edit_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.", reply_markup=keyboard)
            return False
        return True
    
    async def _consume_quota(self, user_id: int) -> None:
        """–°–ø–∏—Å—ã–≤–∞–µ—Ç –∫–≤–æ—Ç—É –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω"""
        if not self._is_admin(user_id):
            await self.subs.consume(user_id)
    
    async def _create_result_keyboard(self, user_id: int, generation_type: str = "unknown") -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        from bot.utils.handlers_common import HandlerUtils
        from bot.utils.quota_utils import quota_utils
        
        show_upgrade_hint = await quota_utils.should_show_upgrade_hint(user_id)
        return HandlerUtils.create_result_keyboard(show_upgrade_hint=show_upgrade_hint, generation_type=generation_type)
    
    async def _clean_previous_message(self, callback: CallbackQuery) -> None:
        """–£–±–∏—Ä–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏"""
        try:
            await callback.message.edit_reply_markup(reply_markup=None)
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
    
    async def _send_processing_message(self, callback: CallbackQuery) -> Message:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        return await callback.message.answer(MESSAGES["processing"])
    
    async def _delete_processing_message(self, msg: Message) -> None:
        """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ"""
        try:
            await msg.delete()
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
    
    async def _send_result(self, callback: CallbackQuery, content: Dict[str, Any]) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        from bot.utils.quota_utils import quota_utils
        
        user_id = callback.from_user.id
        formatted_content = self.generator.format_content(content)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–≤–æ—Ç–µ –ø–æ—Å–ª–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        quota_status = await quota_utils.get_quota_indicator(user_id)
        if await quota_utils.should_show_upgrade_hint(user_id):
            upgrade_hint = quota_utils.get_upgrade_hint()
            formatted_content += f"\n\n{quota_status}\n{upgrade_hint}"
        else:
            formatted_content += f"\n\n{quota_status}"
        
        keyboard = await self._create_result_keyboard(user_id, "image")
        await callback.message.answer(formatted_content, parse_mode="Markdown", reply_markup=keyboard)
    
    async def _cleanup_temp_file(self, file_path: Optional[str]) -> None:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª"""
        if file_path:
            try:
                os.remove(file_path)
            except (OSError, FileNotFoundError):
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {file_path}")
    
    async def _handle_generation_error(self, callback: CallbackQuery, error: Exception, retry_callback: str) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {error}")
        from shared.utils import KeyboardFactory
        kb = KeyboardFactory.create_retry_keyboard(retry_callback)
        await callback.message.edit_text(MESSAGES["error"], reply_markup=kb)
    
    async def process_image_generation(
        self, 
        callback: CallbackQuery, 
        state: FSMContext, 
        image_path: str,
        retry_callback: str = "process_image_now"
    ) -> None:
        """
        –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
        
        Args:
            callback: Callback query –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            state: FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            image_path: –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            retry_callback: Callback –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        user_id = callback.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–≤–æ—Ç—É
        if not await self._check_quota_and_send_error(user_id, callback):
            return
        
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            await self._clean_previous_message(callback)
            processing_msg = await self._send_processing_message(callback)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
            await self._consume_quota(user_id)
            content = await self.generator.generate_from_image(image_path)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await self._delete_processing_message(processing_msg)
            await self._send_result(callback, content)
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            await state.clear()
            await self._cleanup_temp_file(image_path)
            
            logger.info(f"–ö–æ–Ω—Ç–µ–Ω—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
        except Exception as e:
            await self._cleanup_temp_file(image_path)
            await self._handle_generation_error(callback, e, retry_callback)
    
    async def process_text_generation(
        self, 
        message: Message, 
        state: FSMContext,
        text: str
    ) -> None:
        """
        –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞.
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            state: FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            text: –¢–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        user_id = message.from_user.id
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processing_msg = await message.answer(MESSAGES["processing"])
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
            content = await self.generator.generate_from_text(text)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await self._delete_processing_message(processing_msg)
            formatted_content = self.generator.format_content(content)
            keyboard = await self._create_result_keyboard(user_id, "text")
            await message.answer(formatted_content, parse_mode="Markdown", reply_markup=keyboard)
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.clear()
            
            logger.info(f"–ö–æ–Ω—Ç–µ–Ω—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏–∑ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞: {e}")
            await message.answer(MESSAGES["error"])
    
    async def process_combined_generation(
        self, 
        message: Message, 
        state: FSMContext,
        image_path: str,
        text: str,
        check_quota: bool = True,
        generation_type: str = "both"
    ) -> None:
        """
        –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            state: FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            image_path: –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            text: –¢–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            check_quota: –ù—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∫–≤–æ—Ç—É (False –µ—Å–ª–∏ —É–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–ª–∏)
        """
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–≤–æ—Ç—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if check_quota:
            if not self._is_admin(user_id) and not await self.subs.can_consume(user_id):
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üí≥ –¢–∞—Ä–∏—Ñ—ã", callback_data="open_pricing")],
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_start")],
                ])
                await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.", reply_markup=keyboard)
                return
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            await message.answer(MESSAGES["processing"])
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
            if check_quota:
                await self._consume_quota(user_id)
            content = await self.generator.generate_from_both(image_path, text)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            formatted_content = self.generator.format_content(content)
            keyboard = await self._create_result_keyboard(user_id, generation_type)
            await message.answer(formatted_content, parse_mode="Markdown", reply_markup=keyboard)
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            await state.clear()
            await self._cleanup_temp_file(image_path)
            
            logger.info(f"–ö–æ–Ω—Ç–µ–Ω—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
        except Exception as e:
            await self._cleanup_temp_file(image_path)
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
            from shared.utils import KeyboardFactory
            kb = KeyboardFactory.create_retry_keyboard("process_both")
            await message.answer(MESSAGES["error"], reply_markup=kb)
            await state.clear()


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
result_service = ResultService()
