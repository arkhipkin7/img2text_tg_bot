"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–≤–æ—Ç–∞–º–∏ –∏ –∏—Ö –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
"""

import os
from services.subscriptions import SubscriptionService
from shared.pricing import PRICING


class QuotaUtils:
    """–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–≤–æ—Ç –∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    def __init__(self):
        redis_url = os.getenv("REDIS_URL", "redis://redis:6379")
        self.subs = SubscriptionService(redis_url)
    
    async def get_quota_indicator(self, user_id: int) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∫–≤–æ—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.
        
        Returns:
            str: –≠–º–æ–¥–∑–∏ –∏ —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ –∫–≤–æ—Ç—ã
        """
        try:
            remaining = await self.subs.get_remaining(user_id)
            
            if remaining <= 0:
                return "üî¥ –õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω"
            elif remaining == 1:
                return f"üü° –ü–æ—Å–ª–µ–¥–Ω–∏–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å"
            elif remaining <= 2:
                return f"üü† –û—Å—Ç–∞–ª–æ—Å—å {remaining} –∑–∞–ø—Ä–æ—Å–∞"
            else:
                return f"üü¢ –û—Å—Ç–∞–ª–æ—Å—å {remaining} –∑–∞–ø—Ä–æ—Å–æ–≤"
                
        except Exception:
            return "üü¢ –ó–∞–ø—Ä–æ—Å—ã –¥–æ—Å—Ç—É–ø–Ω—ã"
    
    async def get_quota_status_text(self, user_id: int) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∫–≤–æ—Ç—ã.
        
        Returns:
            str: –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–≤–æ—Ç–µ
        """
        try:
            remaining = await self.subs.get_remaining(user_id)
            free_limit = PRICING.get("free_requests", 3)
            used = free_limit - remaining
            
            if remaining > 0:
                return f"üìä **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:** {used}/{free_limit} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"
            else:
                return f"üìä **–õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω:** {used}/{free_limit} –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ"
                
        except Exception:
            return "üìä **–°—Ç–∞—Ç—É—Å:** –ó–∞–ø—Ä–æ—Å—ã –¥–æ—Å—Ç—É–ø–Ω—ã"
    
    async def should_show_upgrade_hint(self, user_id: int) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É –æ–± –∞–ø–≥—Ä–µ–π–¥–µ"""
        try:
            remaining = await self.subs.get_remaining(user_id)
            return remaining <= 1
        except Exception:
            return False
    
    def get_upgrade_hint(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫—É –æ–± –∞–ø–≥—Ä–µ–π–¥–µ"""
        cheapest_plan = min(PRICING["plans"], key=lambda x: x["price_rub"])
        price_per_request = cheapest_plan["price_rub"] / cheapest_plan["quota"]
        one_time_price = PRICING["one_time"]["price_rub"]
        
        savings = one_time_price - price_per_request
        savings_percent = int((savings / one_time_price) * 100)
        
        return (
            f"üí° **–°–æ–≤–µ—Ç:** –¢–∞—Ä–∏—Ñ {cheapest_plan['label']} = "
            f"{price_per_request:.0f}‚ÇΩ –∑–∞ –∑–∞–ø—Ä–æ—Å "
            f"(—ç–∫–æ–Ω–æ–º–∏—è {savings_percent}% –ø—Ä–æ—Ç–∏–≤ —Ä–∞–∑–æ–≤—ã—Ö –ø–æ–∫—É–ø–æ–∫)"
        )


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
quota_utils = QuotaUtils()
