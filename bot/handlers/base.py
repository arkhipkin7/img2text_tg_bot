"""
–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
"""
import logging
from typing import Optional, Dict, Any
from aiogram import Router
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from shared.utils import FileUtils, KeyboardFactory, ValidationUtils, ErrorHandler

logger = logging.getLogger(__name__)

class BaseHandler:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    
    def __init__(self):
        self.router = Router()
        self.file_utils = FileUtils()
        self.keyboard_factory = KeyboardFactory()
        self.validation_utils = ValidationUtils()
        self.error_handler = ErrorHandler()
    
    async def handle_error(
        self, 
        error: Exception, 
        context: str, 
        message: Optional[Message] = None,
        callback: Optional[CallbackQuery] = None,
        state: Optional[FSMContext] = None
    ) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        user_id = None
        if message:
            user_id = message.from_user.id
        elif callback:
            user_id = callback.from_user.id
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        self.error_handler.log_and_handle_error(error, context, user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        error_message = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        
        if message:
            await message.answer(error_message)
        elif callback:
            await callback.message.edit_text(error_message)
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        if state:
            await state.clear()
    
    async def validate_and_sanitize_text(self, text: str) -> Optional[str]:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏ –æ—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç"""
        if not self.validation_utils.validate_text_length(text):
            return None
        
        return self.validation_utils.sanitize_text(text)
    
    async def cleanup_temp_files(self, file_paths: list, state: Optional[FSMContext] = None) -> None:
        """–û—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
        for file_path in file_paths:
            if file_path:
                self.file_utils.safe_remove_file(file_path)
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if state:
            await state.clear()
    
    def get_user_info(self, message: Optional[Message] = None, callback: Optional[CallbackQuery] = None) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        if message:
            return {
                'id': message.from_user.id,
                'username': message.from_user.username,
                'first_name': message.from_user.first_name
            }
        elif callback:
            return {
                'id': callback.from_user.id,
                'username': callback.from_user.username,
                'first_name': callback.from_user.first_name
            }
        return {}
    
    async def log_user_action(
        self, 
        action: str, 
        message: Optional[Message] = None, 
        callback: Optional[CallbackQuery] = None
    ) -> None:
        """–õ–æ–≥–∏—Ä—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_info = self.get_user_info(message, callback)
        user_id = user_info.get('id', 'unknown')
        username = user_info.get('username', 'unknown')
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} (@{username}) –≤—ã–ø–æ–ª–Ω–∏–ª –¥–µ–π—Å—Ç–≤–∏–µ: {action}")
    
    def create_success_message(self, content: Dict[str, Any]) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        title = content.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        short_desc = content.get('short_description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')
        features_count = len(content.get('features', []))
        seo_count = len(content.get('seo_keywords', []))
        
        return (
            f"üéØ **{title}**\n\n"
            f"üìù **–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:**\n"
            f"{short_desc}\n\n"
            f"‚ú® **–û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:**\n"
            f"‚Ä¢ {features_count} —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫\n\n"
            f"üîç **SEO-–∫–ª—é—á–∏ –¥–ª—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è:**\n"
            f"‚Ä¢ {seo_count} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤\n\n"
            f"‚úÖ –ì–æ—Ç–æ–≤–æ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞—Ö."
        ) 