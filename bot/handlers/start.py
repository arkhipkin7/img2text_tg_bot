"""
–†–µ—Ñ–∞–∫—Ç–æ—Ä–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start –∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.
–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–ø—Ä–æ—â–µ–Ω –∑–∞ —Å—á–µ—Ç –≤—ã–Ω–æ—Å–∞ –æ–±—â–µ–π –ª–æ–≥–∏–∫–∏ –≤ —É—Ç–∏–ª–∏—Ç—ã.
"""

import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from shared.constants import MESSAGES
from bot.utils.handlers_common import HandlerUtils

logger = logging.getLogger(__name__)
router = Router()


@router.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    
    from bot.utils.quota_utils import quota_utils
    
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–≤–æ—Ç—ã
    quota_status = await quota_utils.get_quota_indicator(user_id)
    quota_detailed = await quota_utils.get_quota_status_text(user_id)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–º–æ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    remaining = await quota_utils.subs.get_remaining(user_id)
    is_new_user = remaining >= 3  # –ü–æ–ª–Ω–∞—è –∫–≤–æ—Ç–∞ = –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    
    message_text = MESSAGES["welcome"].format(
        quota_status=f"{quota_status}\n{quota_detailed}"
    )
    
    keyboard = HandlerUtils.create_main_menu_keyboard(show_demo=is_new_user)
    await message.answer(message_text, reply_markup=keyboard, parse_mode="Markdown")


@router.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    keyboard = HandlerUtils.create_back_keyboard()
    await message.answer(MESSAGES["help"], reply_markup=keyboard, parse_mode="Markdown")


@router.message(Command("menu"))
async def cmd_menu(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu - –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /menu –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    
    from bot.utils.quota_utils import quota_utils
    
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–≤–æ—Ç—ã
    quota_status = await quota_utils.get_quota_indicator(user_id)
    quota_detailed = await quota_utils.get_quota_status_text(user_id)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–º–æ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    remaining = await quota_utils.subs.get_remaining(user_id)
    is_new_user = remaining >= 3  # –ü–æ–ª–Ω–∞—è –∫–≤–æ—Ç–∞ = –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    
    message_text = MESSAGES["welcome"].format(
        quota_status=f"{quota_status}\n{quota_detailed}"
    )
    
    keyboard = HandlerUtils.create_main_menu_keyboard(show_demo=is_new_user)
    await message.answer(message_text, reply_markup=keyboard, parse_mode="Markdown")


# Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@router.callback_query(F.data == "back_to_start")
async def back_to_start(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    data = await state.get_data()
    image_path = data.get("image_path")
    if image_path:
        try:
            import os
            if os.path.exists(image_path):
                os.remove(image_path)
                logger.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é: {image_path}")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {e}")
    
    await state.clear()
    # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ–Ω–æ –Ω–µ –æ—Å—Ç–∞–≤–∞–ª–æ—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏
    try:
        await callback.message.delete()
    except:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –º–µ–Ω—é
    await HandlerUtils.send_welcome_menu(callback, edit=False)
    await callback.answer()


@router.callback_query(F.data == "help")
async def help_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å"""
    # –£–¥–∞–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ–Ω–æ –Ω–µ –æ—Å—Ç–∞–≤–∞–ª–æ—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏
    try:
        await callback.message.delete()
    except:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é
    keyboard = HandlerUtils.create_help_back_keyboard()
    await callback.message.answer(MESSAGES["help"], reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()


@router.callback_query(F.data == "process_image_only")
async def process_image_only_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'"""
    # –£–¥–∞–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ–Ω–æ –Ω–µ –æ—Å—Ç–∞–≤–∞–ª–æ—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏
    try:
        await callback.message.delete()
    except:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
    await callback.message.answer("üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    await callback.answer()


@router.callback_query(F.data == "process_text_only") 
async def process_text_only_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç'"""
    # –£–¥–∞–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ–Ω–æ –Ω–µ –æ—Å—Ç–∞–≤–∞–ª–æ—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏
    try:
        await callback.message.delete()
    except:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
    await callback.message.answer("üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    await callback.answer()


@router.callback_query(F.data == "process_both")
async def process_both_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–±–∞'"""
    from bot.handlers.process_both import BothProcessingStates
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    await state.set_state(BothProcessingStates.waiting_for_image)
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    from bot.utils.handlers_common import HandlerUtils
    keyboard = HandlerUtils.create_back_keyboard()
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ–Ω–æ –Ω–µ –æ—Å—Ç–∞–≤–∞–ª–æ—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏
    try:
        await callback.message.delete()
    except:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
    await callback.message.answer(
        "üì∑ **–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞**\n\n"
        "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —è –ø–æ–ø—Ä–æ—à—É –≤–∞—Å –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –∏ —Å–æ–∑–¥–∞–º –ø–æ–ª–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞.",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await callback.answer()


@router.callback_query(F.data == "show_demo")
async def show_demo_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ–º–æ-—Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    try:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ–Ω–æ –Ω–µ –æ—Å—Ç–∞–≤–∞–ª–æ—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏
        try:
            await callback.message.delete()
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ–º–æ
        keyboard = HandlerUtils.create_demo_keyboard()
        await callback.message.answer(
            MESSAGES["demo_result"], 
            reply_markup=keyboard, 
            parse_mode="Markdown"
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_demo_callback: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "copy_result")
async def copy_result_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å'"""
    try:
        await callback.answer("üìã –¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω! –í—Å—Ç–∞–≤—å—Ç–µ –≤ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ", show_alert=True)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ copy_result_callback: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("generate_more_"))
async def generate_more_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ' - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –Ω–∞—á–∞–ª—É —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏ –≤ –Ω–∞—á–∞–ª–µ
        from bot.utils.handlers_common import HandlerUtils
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑ callback_data
        generation_type = callback.data.split("_", 2)[2]  # generate_more_both -> both
        logger.info(f"generate_more_callback: callback_data={callback.data}, generation_type={generation_type}")
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏ –Ω–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        data = await state.get_data()
        image_path = data.get("image_path")
        if image_path:
            try:
                import os
                if os.path.exists(image_path):
                    os.remove(image_path)
                    logger.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω –ø—Ä–∏ –Ω–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {image_path}")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {e}")
        
        await state.clear()
        
        # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
        try:
            await callback.message.edit_reply_markup(reply_markup=None)
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –Ω–∞—á–∞–ª—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
        if generation_type == "both":
            # –î–ª—è –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –æ–∂–∏–¥–∞–Ω–∏—é —Ñ–æ—Ç–æ
            from bot.handlers.process_both import BothProcessingStates
            await state.set_state(BothProcessingStates.waiting_for_image)
            
            keyboard = HandlerUtils.create_back_keyboard()
            
            await callback.message.answer(
                "üì∑ **–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞**\n\n"
                "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —è –ø–æ–ø—Ä–æ—à—É –≤–∞—Å –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –∏ —Å–æ–∑–¥–∞–º –ø–æ–ª–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞.",
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
        elif generation_type == "image":
            # –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –ø–æ —Ñ–æ—Ç–æ
            keyboard = HandlerUtils.create_back_keyboard()
            await callback.message.answer(
                "üì∑ **–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞**\n\n"
                "–Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ –∏ —Å–æ–∑–¥–∞–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞.",
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
        elif generation_type == "text":
            # –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –ø–æ —Ç–µ–∫—Å—Ç—É
            keyboard = HandlerUtils.create_back_keyboard()
            await callback.message.answer(
                "üìù **–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞**\n\n"
                "–Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à —Ç–µ–∫—Å—Ç –∏ —Å–æ–∑–¥–∞–º –ø–æ–ª–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞ —Å SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π.",
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
        else:
            # –ï—Å–ª–∏ —Ç–∏–ø –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await HandlerUtils.send_welcome_menu(callback, edit=False)
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ generate_more_callback: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "back_to_start_from_demo")
async def back_to_start_from_demo(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –¥–µ–º–æ"""
    # –£–¥–∞–ª—è–µ–º –¥–µ–º–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ–Ω–æ –Ω–µ –æ—Å—Ç–∞–≤–∞–ª–æ—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏
    try:
        await callback.message.delete()
    except:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    from bot.utils.handlers_common import HandlerUtils
    await HandlerUtils.send_welcome_menu(callback, edit=False)
    await callback.answer()


@router.callback_query(F.data == "back_to_start_from_help")
async def back_to_start_from_help(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –ø–æ–º–æ—â–∏"""
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é, —á—Ç–æ–±—ã –æ–Ω–æ –Ω–µ –æ—Å—Ç–∞–≤–∞–ª–æ—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏
    try:
        await callback.message.delete()
    except:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    from bot.utils.handlers_common import HandlerUtils
    await HandlerUtils.send_welcome_menu(callback, edit=False)
    await callback.answer()


@router.callback_query(F.data == "back_to_start_from_instructions")
async def back_to_start_from_instructions(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π"""
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π, —á—Ç–æ–±—ã –æ–Ω–æ –Ω–µ –æ—Å—Ç–∞–≤–∞–ª–æ—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏
    try:
        await callback.message.delete()
    except:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    from bot.utils.handlers_common import HandlerUtils
    await HandlerUtils.send_welcome_menu(callback, edit=False)
    await callback.answer()


@router.callback_query(F.data == "back_to_start_from_result")
async def back_to_start_from_result(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    # –ù–ï —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º - –æ–Ω–æ –¥–æ–ª–∂–Ω–æ –æ—Å—Ç–∞—Ç—å—Å—è –≤ –∏—Å—Ç–æ—Ä–∏–∏!
    # –ü—Ä–æ—Å—Ç–æ —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    from bot.utils.handlers_common import HandlerUtils
    await HandlerUtils.send_welcome_menu(callback, edit=False)
    await callback.answer()