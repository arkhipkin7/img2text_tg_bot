import asyncio
import os
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.enums import ParseMode
from aiogram.types import BotCommand

from config import BOT_TOKEN, ADMIN_ID
from handlers import start, process_image, process_text, process_both, admin, subscriptions
from middleware.rate_limiting import RateLimitMiddleware
from shared.logging_config import setup_logging
from shared.utils import FileUtils

logger = setup_logging(__name__)

async def main():
    try:
        FileUtils.ensure_temp_dir()
        
        from aiogram.client.default import DefaultBotProperties
        bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN))
        dp = Dispatcher(storage=MemoryStorage())
        
        # –î–æ–±–∞–≤–ª—è–µ–º rate limiting middleware
        dp.message.middleware(RateLimitMiddleware())
        dp.callback_query.middleware(RateLimitMiddleware())
        
        await bot.set_my_commands([
            BotCommand(command="start", description="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
            BotCommand(command="menu", description="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
            BotCommand(command="help", description="‚ÑπÔ∏è –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º"),
            BotCommand(command="image_generate", description="üì∑ –°–æ–∑–¥–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ —Ñ–æ—Ç–æ"),
            BotCommand(command="text_generate", description="üìù –î–æ–ø–æ–ª–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç SEO-–∫–ª—é—á–∞–º–∏"),
            BotCommand(command="both_generate", description="üì∑üìù –ü–æ–ª–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —Ç–æ–≤–∞—Ä–∞"),
            BotCommand(command="status", description="üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã (–∞–¥–º–∏–Ω)"),
            BotCommand(command="fallback", description="üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º (–∞–¥–º–∏–Ω)")
        ])
        
        dp.include_router(start.router)
        dp.include_router(subscriptions.router)
        dp.include_router(process_image.router)
        dp.include_router(process_text.router)
        dp.include_router(process_both.router)
        dp.include_router(admin.router)
        
        @dp.errors()
        async def errors_handler(event):
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {event.exception}")
            try:
                if ADMIN_ID:
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    user_info = "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
                    update = event.update
                    if hasattr(update, 'from_user') and update.from_user:
                        user_info = f"ID: {update.from_user.id}"
                    elif hasattr(update, 'message') and update.message and update.message.from_user:
                        user_info = f"ID: {update.message.from_user.id}"
                    elif hasattr(update, 'callback_query') and update.callback_query and update.callback_query.from_user:
                        user_info = f"ID: {update.callback_query.from_user.id}"
                    
                    error_msg = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info}\n–û—à–∏–±–∫–∞: {str(event.exception)[:400]}"
                    await bot.send_message(ADMIN_ID, error_msg)
            except Exception as notify_error:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {notify_error}")
            return True
        
        logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await dp.start_polling(bot)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        raise
    finally:
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        try:
            import shutil
            if os.path.exists("temp"):
                shutil.rmtree("temp")
        except (OSError, FileNotFoundError) as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {e}")
            pass

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}") 