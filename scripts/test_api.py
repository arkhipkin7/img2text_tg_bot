#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API
"""
import requests
import json
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent.parent))

def test_health_check(base_url: str = "http://localhost:8000"):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç endpoint /health"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ /health...")
    
    try:
        response = requests.get(f"{base_url}/health")
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Health check —É—Å–ø–µ—à–µ–Ω: {data}")
            return True
        else:
            print(f"‚ùå Health check –Ω–µ—É–¥–∞—á–µ–Ω: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ health check: {e}")
        return False

def test_text_generation(base_url: str = "http://localhost:8000"):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    print("\nüìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞...")
    
    try:
        data = {
            "type": "text_only",
            "text": "–°—Ç–∏–ª—å–Ω—ã–µ –∫—Ä–æ—Å—Å–æ–≤–∫–∏ –¥–ª—è —Å–ø–æ—Ä—Ç–∞ –∏ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Å–∫–∏"
        }
        
        response = requests.post(f"{base_url}/generate", data=data)
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–∞ —É—Å–ø–µ—à–Ω–∞:")
            print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {result['title']}")
            print(f"   –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {result['short_description'][:50]}...")
            print(f"   –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: {len(result['features'])} —à—Ç.")
            print(f"   SEO-–∫–ª—é—á–∏: {len(result['seo_keywords'])} —à—Ç.")
            return True
        else:
            print(f"‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–∞ –Ω–µ—É–¥–∞—á–Ω–∞: {response.status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞: {e}")
        return False

def test_image_generation(base_url: str = "http://localhost:8000", image_path: str = None):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    print("\nüì∑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
    
    if not image_path or not os.path.exists(image_path):
        print("‚ö†Ô∏è  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç")
        return True
    
    try:
        with open(image_path, 'rb') as f:
            files = {'image': f}
            data = {'type': 'image_only'}
            
            response = requests.post(f"{base_url}/generate", data=data, files=files)
            if response.status_code == 200:
                result = response.json()
                print(f"‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–∞:")
                print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {result['title']}")
                print(f"   –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {result['short_description'][:50]}...")
                print(f"   –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: {len(result['features'])} —à—Ç.")
                print(f"   SEO-–∫–ª—é—á–∏: {len(result['seo_keywords'])} —à—Ç.")
                return True
            else:
                print(f"‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ—É–¥–∞—á–Ω–∞: {response.status_code}")
                print(f"   –û—Ç–≤–µ—Ç: {response.text}")
                return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return False

def test_combined_generation(base_url: str = "http://localhost:8000", image_path: str = None):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é"""
    print("\nüì∑üìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...")
    
    if not image_path or not os.path.exists(image_path):
        print("‚ö†Ô∏è  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç")
        return True
    
    try:
        with open(image_path, 'rb') as f:
            files = {'image': f}
            data = {
                'type': 'both',
                'text': '–°—Ç–∏–ª—å–Ω—ã–µ –∫—Ä–æ—Å—Å–æ–≤–∫–∏ –¥–ª—è —Å–ø–æ—Ä—Ç–∞ –∏ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Å–∫–∏'
            }
            
            response = requests.post(f"{base_url}/generate", data=data, files=files)
            if response.status_code == 200:
                result = response.json()
                print(f"‚úÖ –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞:")
                print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {result['title']}")
                print(f"   –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {result['short_description'][:50]}...")
                print(f"   –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: {len(result['features'])} —à—Ç.")
                print(f"   SEO-–∫–ª—é—á–∏: {len(result['seo_keywords'])} —à—Ç.")
                return True
            else:
                print(f"‚ùå –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ—É–¥–∞—á–Ω–∞: {response.status_code}")
                print(f"   –û—Ç–≤–µ—Ç: {response.text}")
                return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ API...")
    
    base_url = os.getenv('API_BASE_URL', 'http://localhost:8000')
    image_path = os.getenv('TEST_IMAGE_PATH', None)
    
    print(f"üìç API URL: {base_url}")
    if image_path:
        print(f"üì∑ –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_path}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    tests = [
        test_health_check(base_url),
        test_text_generation(base_url),
        test_image_generation(base_url, image_path),
        test_combined_generation(base_url, image_path)
    ]
    
    # –ü–æ–¥–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
    passed = sum(tests)
    total = len(tests)
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"   –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}")
    print(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {passed/total*100:.1f}%")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return 0
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
        return 1

if __name__ == "__main__":
    sys.exit(main()) 